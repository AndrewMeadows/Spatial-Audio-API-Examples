buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}


plugins {
    id  "com.github.johnrengelman.shadow" version "2.0.4"
    id  'java'
    id  'eclipse'
    id  'idea'
    id  'maven'
    id  'maven-publish'
}

repositories {
   mavenLocal()
   mavenCentral()
   google()
   jcenter()
   maven { url "https://repo1.maven.org/maven2/" }
   maven { url "https://oss.sonatype.org/content/repositories/releases" }
   maven { url "https://repo.mikeprimm.com" }
   maven { url "https://repo.maven.apache.org/maven2" }
   maven { url "https://hub.spigotmc.org/nexus/content/repositories/snapshots/" }
   maven { url "https://repo.codemc.org/repository/maven-public/" }
}



apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'


version = '1.2'
group = 'com.highfidelity.hifimc' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'hifimc'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed. 
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed. 
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed. 
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


configurations {
    embed
    compile.extendsFrom(embed)
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.5-36.0.42'

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    embed 'javax.websocket:javax.websocket-api:1.1'
    embed 'javax.servlet:javax.servlet-api:3.1'
    embed 'org.eclipse.jetty:jetty-server:9.4.26.v20200117'
    embed 'org.eclipse.jetty:jetty-servlet:9.4.26.v20200117'
    embed 'org.eclipse.jetty.websocket:websocket-api:9.4.26.v20200117'
    embed 'org.eclipse.jetty.websocket:websocket-server:9.4.26.v20200117'
    embed 'com.googlecode.json-simple:json-simple:1.1.1'
}

jar {
   classifier = 'unshaded'
}

shadowJar {
    dependencies {
        include(dependency('com.googlecode.json-simple:json-simple:'))
        include(dependency('javax.servlet::'))
        include(dependency('org.eclipse.jetty::'))
        include(dependency('org.eclipse.jetty.websocket::'))
        include(dependency('org.eclipse.jetty.orbit:javax.servlet:'))
	}
	relocate('org.json.simple', 'com.highfidelity.json.simple')
	relocate('org.eclipse.jetty', 'com.highfidelity.jetty')
	relocate('org.eclipse.jetty.websocket', 'com.highfidelity.jetty.websocket')
	relocate('javax.servlet', 'com.highfidelity.javax.servlet' )
    destinationDir = file './build/'
    classifier = ''

    manifest {
        attributes([
            "Specification-Title": "hifimc",
            "Specification-Vendor": "highfidelity",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"highfidelity",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

reobf {
    shadowJar {} // Reobfuscate the shadowed JAR
}

artifacts {
    archives shadowJar
}
