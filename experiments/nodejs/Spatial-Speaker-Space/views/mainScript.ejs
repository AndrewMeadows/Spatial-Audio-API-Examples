<% if (participantType === "speaker") { %>
<script>
    const IS_SPEAKER = true;
</script>
<%} else { %>
<script>
    const IS_SPEAKER = false;
</script>
<% } %>

<script>
    const MY_CONNECTION_TIMESTAMP = parseInt('<%- JSON.stringify(connectionTimestamp) %>');

    let connectDisconnectButton = document.querySelector('.connectDisconnectButton');
    connectDisconnectButton.addEventListener("click", connectToHiFi);
    connectDisconnectButton.disabled = false;
    let toggleInputMuteButton = document.querySelector('.toggleInputMuteButton');
    let outputAudioEl = document.querySelector(`.outputAudioEl`);
    outputAudioEl.addEventListener('canplay', (e) => { setOutputMute(false); } );

    function updateMyPositionAndOrientation(targetPosition, targetYawOrientationDegrees) {
        if (!hifiCommunicator || !myUserData) {
            return;
        }

        let dataToTransmit = {};

        if (!myUserData.position) {
            myUserData.position = {};
        }

        if (!myUserData.orientationEuler) {
            // For proper aural representation.
            // TODO: Talk to Sam or Luis and figure out why this (and the other related code) is necessary.
            myUserData.orientationEuler = new HighFidelityAudio.OrientationEuler3D({"pitchDegrees": 180});
        }

        if (typeof (targetYawOrientationDegrees) === "number") {
            myUserData.orientationEuler.yawDegrees = targetYawOrientationDegrees;
            dataToTransmit["orientationEuler"] = {};
            Object.assign(dataToTransmit["orientationEuler"], myUserData.orientationEuler);


            if (!IS_SPEAKER) {
                canvasRotationDegrees = -myUserData.orientationEuler.yawDegrees;
            }
        }

        if (targetPosition) {
            Object.assign(myUserData.position, targetPosition);
            dataToTransmit["position"] = {};
            Object.assign(dataToTransmit["position"], myUserData.position);

            if (IS_SPEAKER) {
                canvasRotationDegrees = Math.atan2(myUserData.position.x, -myUserData.position.z) * 180 / Math.PI;
            }
        }

        hifiCommunicator.updateUserDataAndTransmit(dataToTransmit);
    }

    function positionSelfInCrowd() {
        console.log(`${allLocalUserData.length} user(s) present, including ourselves.\n${speakerCount} speaker(s).\n${audienceCount} audience member(s).\n${spatialMicrophoneCount} spatial microphone(s).`);

        let foundOpenSpot = false;
        let currentCircleDivisions = 1;
        let positionsChecked = [];
        let circleRadius = IS_SPEAKER ? SPEAKER_RADIUS_M : AUDIENCE_RADIUS_M;
        if (circleRadius === 0) {
            let currentPotentialPosition = {
                "x": 0,
                "z": 0
            };
            console.log(`Found an open spot at ${JSON.stringify(currentPotentialPosition)}.`);
            updateMyPositionAndOrientation(currentPotentialPosition, 0);
        } else {
            while (!foundOpenSpot) {
                for (let theta = 0; theta < 2 * Math.PI; theta += ((2 * Math.PI) / currentCircleDivisions)) {
                    let currentPotentialPosition = {
                        "x": (circleRadius) * Math.cos(theta),
                        "z": (circleRadius) * Math.sin(theta)
                    };

                    currentPotentialPosition.x = Math.round((currentPotentialPosition.x + Number.EPSILON) * 100) / 100;
                    currentPotentialPosition.z = Math.round((currentPotentialPosition.z + Number.EPSILON) * 100) / 100;

                    if (positionsChecked.find((position) => { return currentPotentialPosition.x === position.x && currentPotentialPosition.z === position.z; })) {
                        continue;
                    }
                    
                    let occupied = allLocalUserData.find((element) => { return element.position && Math.abs(element.position.x - currentPotentialPosition.x) < CLOSE_ENOUGH_M && Math.abs(element.position.z - currentPotentialPosition.z) < CLOSE_ENOUGH_M; });

                    if (!occupied) {
                        let orientationYawRadians = Math.atan2(-currentPotentialPosition.x, -currentPotentialPosition.z);
                        let orientationYawDegrees = orientationYawRadians * 180 / Math.PI;
                        orientationYawDegrees %= 360;
                        let computedYawOrientationDegrees = Math.round((orientationYawDegrees + Number.EPSILON) * 100) / 100;
                        console.log(`Found an open spot at ${JSON.stringify(currentPotentialPosition)} with yaw orientation ${JSON.stringify(computedYawOrientationDegrees)} degrees.`);
                        updateMyPositionAndOrientation(currentPotentialPosition, computedYawOrientationDegrees);
                        foundOpenSpot = true;
                        break;
                    } else {
                        positionsChecked.push(currentPotentialPosition);
                    }
                }

                currentCircleDivisions *= 2;
            }
        }
    }

    const numParticipants = document.querySelector('.numParticipants');
    function recomputeSpeakerAndAudienceCount() {
        let speakers = allLocalUserData.filter((localUserData) => { return localUserData.participantType === "speaker"; })
        speakerCount = speakers.length;

        let audience = allLocalUserData.filter((localUserData) => { return localUserData.participantType === "audience"; })
        audienceCount = audience.length;

        let spatialMicrophones = allLocalUserData.filter((localUserData) => { return localUserData.participantType === "spatialMicrophone"; })
        spatialMicrophoneCount = spatialMicrophones.length;

        numParticipants.innerHTML = audienceCount + speakerCount + spatialMicrophoneCount;

        const mic = allLocalUserData.find((userData) => { return userData.participantType === "spatialMicrophone"; });
        if (mic && mic.isRecording) {
            numParticipants.innerHTML += ` ðŸ”´`;
        }

        updateParticipantsContainerInnerHTML();
    }

    function resetParticipantsCount() {
        audienceCount = 0;
        speakerCount = 0;
        spatialMicrophoneCount = 0;
        numParticipants.innerHTML = 0;
        updateParticipantsContainerInnerHTML();
    }

    function updateParticipantsContainerInnerHTML() {
        participantsContainer.innerHTML = ``;

        let speakersContainer = document.createElement('div');
        speakersContainer.innerHTML = `<h3 class="speakersHeader">Speakers (${speakerCount})</h3>`;

        let audienceContainer = document.createElement('div');
        audienceContainer.innerHTML = `<h3 class="audienceHeader">Audience (${audienceCount})</h3>`;

        let spatialMicrophonesContainer = document.createElement('div');
        spatialMicrophonesContainer.innerHTML = `<h3 class="spatialMicrophonesHeader">Spatial Mics (${spatialMicrophoneCount})</h3>`;

        for (const userData of allLocalUserData) {
            let participant = document.createElement('p');
            participant.style.color = userData.colorHex;
            participant.setAttribute('data-visit-id-hash', userData.visitIDHash);
            participant.innerText = userData.displayName;
            if (userData.visitIDHash === myVisitIDHash) {
                participant.innerText += " (you)";
            }
            if (userData.participantType === "speaker") {
                speakersContainer.appendChild(participant);
            } else if (userData.participantType === "audience") {
                audienceContainer.appendChild(participant);
            } else if (userData.participantType === "spatialMicrophone") {
                participant.classList.add("spatialMicrophoneParticipant");
                if (userData.isRecording) {
                    participant.innerText += " (recording; click to stop)";
                } else {
                    participant.innerText += " (not recording; click to record)";
                }
                spatialMicrophonesContainer.appendChild(participant);
                participant.addEventListener("click", (e) => {
                    let spatialMicAPIPath;
                    if (location.hostname === "localhost") {
                        spatialMicAPIPath = `${location.protocol}//${location.hostname}:8124/spatial-microphone/toggle-recording`;
                    } else {
                        spatialMicAPIPath = `${location.protocol}//${location.hostname}/spatial-microphone/toggle-recording`;
                    }
                    fetch(spatialMicAPIPath)
                        .then(response => response.json())
                        .then(data => console.log(data));
                });
            }
            participant.addEventListener("mouseenter", (e) => {
                currentlyHoveringOverVisitIDHash = e.target.getAttribute('data-visit-id-hash');
            });
            participant.addEventListener("mouseleave", (e) => {
                currentlyHoveringOverVisitIDHash = undefined;
            });
        }

        participantsContainer.appendChild(speakersContainer);
        participantsContainer.appendChild(audienceContainer);
        participantsContainer.appendChild(spatialMicrophonesContainer);
    }

    async function onNewHiFiUserDataReceived(receivedHiFiAudioAPIDataArray) {
        for (let i = 0; i < receivedHiFiAudioAPIDataArray.length; i++) {
            let currentDataFromServer = receivedHiFiAudioAPIDataArray[i];
            let currentVisitIDHash = currentDataFromServer.hashedVisitID;
            let currentLocalUserData = allLocalUserData.find((element) => { return element.visitIDHash === currentVisitIDHash; })
            let isMine = currentVisitIDHash === myVisitIDHash;

            if (currentLocalUserData) {
                if (currentDataFromServer.position && !isMine) {
                    if (!currentLocalUserData.position) {
                        currentLocalUserData.position = new HighFidelityAudio.Point3D();
                    }

                    if (typeof (currentDataFromServer.position.x) === "number") {
                        currentLocalUserData.position.x = currentDataFromServer.position.x;
                        mustUpdateCanvas = true;
                    }
                    if (typeof (currentDataFromServer.position.z) === "number") {
                        currentLocalUserData.position.z = currentDataFromServer.position.z;
                        mustUpdateCanvas = true;
                    }
                }
                
                if (currentDataFromServer.orientationEuler && !isMine) {
                    if (!currentLocalUserData.orientationEuler) {
                        currentLocalUserData.orientationEuler = new HighFidelityAudio.OrientationEuler3D();
                    }

                    if (typeof (currentDataFromServer.orientationEuler.yawDegrees) === "number") {
                        currentLocalUserData.orientationEuler.yawDegrees = currentDataFromServer.orientationEuler.yawDegrees;
                        // For proper visual representation.
                        // TODO: Talk to Sam or Luis and figure out why this (and the other related code) is necessary.
                        currentLocalUserData.orientationEuler.yawDegrees -= 180;
                        currentLocalUserData.orientationEuler.yawDegrees %= 360;
                        mustUpdateCanvas = true;
                    }
                }

                // Only update volume data for speakers.
                if (currentLocalUserData.participantType === "speaker" && typeof (currentDataFromServer.volumeDecibels) === "number") {
                    currentLocalUserData.volumeDecibels = currentDataFromServer.volumeDecibels;

                    if (isMine) {
                        let percentage = linearScale(currentLocalUserData.volumeDecibels, -90, 0, 0, 100);
                        volumeThresholdSliderBackground.style.background = `linear-gradient(to right, #c2c2c2, #ad983b ${percentage}%, #00000000 ${percentage}%, #00000000 100%)`;
                    }

                    mustUpdateCanvas = true;
                }
            } else {
                // For proper visual representation.
                // TODO: Talk to Sam or Luis and figure out why this (and the other related code) is necessary.
                if (currentDataFromServer.orientationEuler) {
                    currentDataFromServer.orientationEuler.yawDegrees -= 180;
                    currentDataFromServer.orientationEuler.yawDegrees %= 360;
                }
                allLocalUserData.push(new SpeakerSpaceUserData({
                    visitIDHash: currentVisitIDHash,
                    position: currentDataFromServer.position,
                    orientationEuler: currentDataFromServer.orientationEuler,
                    volumeDecibels: currentDataFromServer.volumeDecibels,
                }));
            }
        }

        let allAlone = false;
        if (!receivedInitialOtherUserDataFromHiFi && receivedHiFiAudioAPIDataArray.length === 1 && receivedHiFiAudioAPIDataArray[0].visitIDHash === myVisitIDHash) {
            console.log("We're the only one here!");
            allAlone = true;
            receivedInitialOtherUserDataFromHiFi = true;
        }

        let usersSittingInMySeat = [];
        // Everyone can sit at (0, 0), so we don't want to check for collisions in that case.
        if (myUserData && myUserData.position && myUserData.position.x !== 0 && myUserData.position.z !== 0) {
            usersSittingInMySeat = allLocalUserData.filter((userData) => {
                return myUserData &&
                    myUserData.position &&
                    userData.position &&
                    userData.visitIDHash !== myVisitIDHash &&
                    Math.abs(myUserData.position.x - userData.position.x) < CLOSE_ENOUGH_M &&
                    Math.abs(myUserData.position.z - userData.position.z) < CLOSE_ENOUGH_M;
            });
        } else {
            mustUpdateCanvas = true;
        }
        let mustReposition = false;
        if (usersSittingInMySeat.length > 0 || !receivedInitialOtherUserDataFromHiFi || allAlone) {
            if (usersSittingInMySeat.length > 0) {
                console.warn(`There's another user in our seat! Checking to see if we were here first...`);
                let olderConnectionTimestamp;
                let timestampValid = false;
                for (userInMySeat of usersSittingInMySeat) {
                    let otherConnectionTimestamp;
                    if (userInMySeat.connectionTimestamp) {
                        otherConnectionTimestamp = userInMySeat.connectionTimestamp
                    } else {
                        try {
                            otherConnectionTimestamp = await fetch(`/spatial-speaker-space/get-connection-age?providedUserID=${userData.providedUserID}&spaceName=${spaceName}`);
                        } catch (e) {
                            continue;
                        }
                        try {
                            otherConnectionTimestamp = await otherConnectionTimestamp.json().connectionTimestamp;
                            userInMySeat.connectionTimestamp = otherConnectionTimestamp;
                        } catch (e) {
                            continue;
                        }
                    }
                    if (otherConnectionTimestamp && otherConnectionTimestamp < MY_CONNECTION_TIMESTAMP) {
                        olderConnectionTimestamp = otherConnectionTimestamp;
                        timestampValid = true;
                        break;
                    }
                }
                if (olderConnectionTimestamp && timestampValid) {
                    console.warn(`Someone else with an older connection was sitting in our seat!\nTheir timestamp: ${olderConnectionTimestamp}\nOur timestamp  : ${MY_CONNECTION_TIMESTAMP}\nLet's recompute our position.`);
                    mustReposition = true;
                } else if (timestampValid) {
                    console.warn(`We were here first, so we're staying put.`);
                }
            }
            if (!receivedInitialOtherUserDataFromHiFi) {
                receivedInitialOtherUserDataFromHiFi = true;
                mustReposition = true;
            }

            if (allAlone || mustReposition) {
                positionSelfInCrowd();
            }
        }

        if (!readyToSendWebSocketData) {
            readyToSendWebSocketData = true;
            maybeSendInitialWebSocketData();
        }
    }

    class SpeakerSpaceUserData {
        constructor(data) {
            this.visitIDHash = data.visitIDHash;
            this.displayName = data.displayName;
            this.colorHex = data.colorHex || hexColorFromString(this.visitIDHash);
            this.position = data.position;
            this.orientationEuler = data.orientationEuler;
            this.participantType = data.participantType;
            this.isRecording = data.isRecording || false;
            this.volumeDecibels = data.volumeDecibels;
            this.hiFiGain = data.hiFiGain || 1.0;
            this.volumeThreshold = data.volumeThreshold || -60;
        }
    }

    let muteButtonHookedUp = false;
    async function connectToHiFi() {
        // Disable the Connect button after the user clicks it so we don't double-connect.
        connectDisconnectButton.disabled = true;
        connectDisconnectButton.innerHTML = `Connecting...`;
        toggleInputMuteButton.classList.add("toggleInputMuteButton--disabled");
        hiFiGainSlider.disabled = true;

        // Get the audio media stream associated with the user's default audio input device.
        let audioMediaStream;
        if (IS_SPEAKER) {
            try {
                audioMediaStream = await navigator.mediaDevices.getUserMedia({ audio: HighFidelityAudio.getBestAudioConstraints(), video: false });
            } catch (e) {
                return;
            }
        }

        HighFidelityAudio.HiFiLogger.setHiFiLogLevel(HighFidelityAudio.HiFiLogLevel.Debug);

        // Set up our `HiFiCommunicator` object, supplying our media stream and initial user data.
        hifiCommunicator = new HighFidelityAudio.HiFiCommunicator({
            transmitRateLimitTimeoutMS: 10,
            onUsersDisconnected: onUsersDisconnected,
            userDataStreamingScope: HighFidelityAudio.HiFiUserDataStreamingScopes.All
        });

        // Set up a new User Data Subscription to get User Data updates from the server.
        let newUserDataSubscription = new HighFidelityAudio.UserDataSubscription({
            // Setting `providedUserID` to `null` (or omitting it) means we will get data updates from **all** connected Users, including ourselves.
            "providedUserID": null,
            // There are other components we could subscribe to here, but we're only subscribing to Volume data updates.
            "components": [
                HighFidelityAudio.AvailableUserDataSubscriptionComponents.Position,
                HighFidelityAudio.AvailableUserDataSubscriptionComponents.OrientationEuler,
                HighFidelityAudio.AvailableUserDataSubscriptionComponents.VolumeDecibels
            ],
            // See above for the definition of `onNewHiFiUserDataReceived`.
            "callback": onNewHiFiUserDataReceived
        });
        // Actually add the newly-constructed Data Subscription to the list of our Data Subscriptions on our `HiFiCommunicator`.
        hifiCommunicator.addUserDataSubscription(newUserDataSubscription);

        allLocalUserData = [];
        receivedInitialOtherUserDataFromHiFi = false;
        resetParticipantsCount();

        // Connect to the HiFi Audio API server!
        try {
            let response = await hifiCommunicator.connectToHiFiAudioAPIServer('<%- hiFiJWT %>');

            myProvidedUserID = response.audionetInitResponse.user_id;
            document.querySelector(".displayNameInput").innerHTML = myProvidedUserID;
            myVisitIDHash = response.audionetInitResponse.visit_id_hash;
            allLocalUserData.push(new SpeakerSpaceUserData({
                "providedUserID": myProvidedUserID,
                "visitIDHash": myVisitIDHash,
                "participantType": IS_SPEAKER ? "speaker" : "audience"
            }));
            updateMyUserData();
            onMyDisplayNameChanged();
            onMyColorHexChanged();
            onVolumeThresholdChanged();
            if (IS_SPEAKER) {
                await hifiCommunicator.setInputAudioMediaStream(audioMediaStream);
                if (!muteButtonHookedUp) {                    
                    toggleInputMuteButton.addEventListener("click", toggleInputMute);
                    muteButtonHookedUp = true;
                }
                toggleInputMuteButton.classList.remove("toggleInputMuteButton--disabled");
            } else {
                setInputMute(true);
                toggleInputMuteButton.classList.add("toggleInputMuteButton--disabled");
            }
            recomputeSpeakerAndAudienceCount();
            console.log(`My Visit ID Hash: ${myVisitIDHash}`);
        } catch (e) {
            console.error(`Error connecting to High Fidelity:\n${JSON.stringify(e)}`);
            connectDisconnectButton.disabled = false;
            toggleInputMuteButton.classList.add("toggleInputMuteButton--disabled");
            connectDisconnectButton.innerHTML = `Connection error. Retry?`;
            hiFiGainSlider.disabled = true;
            return;
        }

        // Show the user that we're connected by changing the text on the button.
        connectDisconnectButton.removeEventListener("click", connectToHiFi);
        connectDisconnectButton.addEventListener("click", disconnectFromHiFi);
        connectDisconnectButton.innerHTML = `Disconnect`;
        connectDisconnectButton.disabled = false;
        hiFiGainSlider.disabled = false;
        volumeThresholdSlider.disabled = false;

        // Set the `srcObject` on our `audio` DOM element to the final, mixed audio stream from the High Fidelity Audio API Server.
        outputAudioEl.srcObject = hifiCommunicator.getOutputAudioMediaStream();
        setOutputMute(false);
    }

    function disconnectFromHiFi() {
        console.log(`Disconnecting from High Fidelity Audio API Servers...`);

        connectDisconnectButton.removeEventListener("click", disconnectFromHiFi);
        connectDisconnectButton.addEventListener("click", connectToHiFi);
        connectDisconnectButton.disabled = false;
        connectDisconnectButton.innerHTML = `Connect`;
        hiFiGainSlider.disabled = true;

        toggleInputMuteButton.classList.add("toggleInputMuteButton--disabled");
        isMuted = false;

        stopWebSocketStuff();

        if (hifiCommunicator) {
            hifiCommunicator.disconnectFromHiFiAudioAPIServer();
        }
        hifiCommunicator = null;
        allLocalUserData = [];
        resetParticipantsCount();
    }

    function onUsersDisconnected(allDisconnectedUserData) {
        for (const disconnectedUserData of allDisconnectedUserData) {
            console.log(`HiFi User left: ${JSON.stringify(disconnectedUserData)}`);
            allLocalUserData = allLocalUserData.filter((localUserData) => {
                return localUserData.visitIDHash !== disconnectedUserData.hashedVisitID;
            });
        }
        recomputeSpeakerAndAudienceCount();
    }

    let particleController = new ParticleController();
    let lastNow = performance.now();
    function physicsLoop() {
        let now = performance.now();
        let dt = now - lastNow;
        lastNow = now;

        particleController.updateAllParticles(now, dt);
    }
    setInterval(physicsLoop, PHYSICS.PHYSICS_TICKRATE_MS);

    function drawLoop(timestamp) {
        updateCanvas();
        window.requestAnimationFrame(drawLoop);
    }
    window.requestAnimationFrame(drawLoop);

    window.onresize = updateCanvasDimensions;
    window.onbeforeunload = disconnectFromHiFi;
</script>