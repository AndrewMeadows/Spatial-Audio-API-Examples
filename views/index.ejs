<!doctype html>

<html lang="en">

<head>
    <meta charset="utf-8">
    <title>High Fidelity Spatial Audio API - Express & EJS Web App</title>
    <style>
        body {
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
        }

        h2 {
            margin: 2px 0 4px 0;
        }

        .userDataTitle {
            width: 100%;
            font-weight: bold;
            margin: 4px 12px 2px 12px;
        }

        .userDataContainer {
            display: flex;
            flex-wrap: wrap;
            margin: 6px 4px;
            font-family: 'Courier New', Courier, monospace;
            font-size: 12px;
        }

        .userDataContainer__ours {
            display: none;
        }
        .userDataContainer__fromServer {
            display: none;
        }

        .userData {
            margin: 8px;
        }

        .userData>p {
            margin: 0;
        }

        .regionContainer * {
            position:absolute;
        }
        .regionContainer .regionPictureContainer {
            z-index: 0;
        }
        .regionContainer .theCanvas {
            z-index: 1;
        }
        .connectDisconnectButton {
            width: 100px;
            height: 50px;
            top: 50px;
            right: 0;
        }
        .outputAudioEl {
            width: 100%;
            height: 50px;
            top: 0;
            left: 0;
        }
        .ourRegionName {
            width: fit-content;
            height: fit-content;
            padding: 4px;
            top: 60px;
            left: 10px;
            text-align: left;
            color: white;
            background-color: rgba(0, 0, 0, 0.4);
            font-family: sans-serif;
            margin: 0 auto;
        }
        .directionButton {
            width: 70px;
            height: 50px;
            margin: 0;
        }
        .buttonContainer #button__north {
            top: 50px;
            left: 0;
            right: 0;
            margin: 0 auto;
        }
        .buttonContainer #button__south {
            bottom: 0;
            left: 0;
            right: 0;
            margin: 0 auto;
        }
        .buttonContainer #button__west {
            left: 0;
            top: 0;
            bottom: 0;
            margin: auto 0;
        }
        .buttonContainer #button__east {
            right: 0;
            top: 0;
            bottom: 0;
            margin: auto 0;
        }
    </style>
</head>

<body>
    <div>
        
    </div>

    <div class="userDataContainer userDataContainer__ours">
        <h2 class="userDataTitle">Our Local User Data:</h2>
        <div class="userData">
            <p class="ourProvidedUserID">Provided User ID: <%- providedUserID %></p>
            <p class="ourHashedVisitID"></p>
            <p class="ourPositionContainer"></p>
            <p class="ourOrientationContainer"></p>
        </div>
    </div>

    <div class="userDataContainer userDataContainer__fromServer"></div>

    <div class="regionContainer" style="width:400px;height:400px;">
        <div class="regionPictureContainer">
            <img id="regionPictureImage" src="" style="width:400px;height:400px;" />
        </div>
        <canvas class="thecanvas" tabindex="1" style="width:400px;height:400px;" height="400px" width="400px"></canvas>
        <div class="buttonContainer" style="width:400px;height:400px;" >
            <audio controls autoplay class="outputAudioEl"></audio>
            <button class="connectDisconnectButton"></button>
            <p class="ourRegionName"></p>
            <button id="button__north" class="directionButton" onclick="goNorth()">North</button>
            <button id="button__west" class="directionButton" onclick="goWest()">West</button>
            <button id="button__east" class="directionButton" onclick="goEast()">East</button>
            <button id="button__south" class="directionButton" onclick="goSouth()">South</button>
        </div>
    </div>

    <script src="https://hifi-spatial-audio-api.s3.amazonaws.com/releases/latest/HighFidelityAudio-latest.js"></script>
    <script>
        let REGION_INFO = {};

        let CANVAS = document.querySelector('.thecanvas');
        CANVAS.width = CANVAS.scrollWidth;
        CANVAS.height = CANVAS.scrollHeight;
        let CTX = CANVAS.getContext("2d");

        let TALK_STATES = {};

        function findRegionByRegionCoord(regionInfo, x, y) {
            for (let i = 0; i < regionInfo.regions.length; i = i + 1) {
                let region = regionInfo.regions[i];
                if (region.x == x && region.y == y) {
                    return region;
                }
            }
            return undefined;
        }
        function getRegionCoord(regionInfo, x, y) {
            return {x: Math.floor(x / regionInfo.regionSize), y: Math.floor(y / regionInfo.regionSize)};
        }
        function findRegionByName(regionInfo, name) {
            for (let i = 0; i < regionInfo.regions.length; i = i + 1) {
                let region = regionInfo.regions[i];
                if (region.name == name) {
                    return region;
                }
            }
            return undefined;
        }
        function getAdjacentRegions(regionInfo, region) {
            return {
                "west": findRegionByRegionCoord(regionInfo, region.x - 1, region.y),
                "east": findRegionByRegionCoord(regionInfo, region.x + 1, region.y),
                "north": findRegionByRegionCoord(regionInfo, region.x, region.y - 1),
                "south": findRegionByRegionCoord(regionInfo, region.x, region.y + 1)
            };
        }
        function debugRegions(regionInfo) {
            for (let i = 0; i < regionInfo.regions.length; i = i + 1) {
                 let region = regionInfo.regions[i];
                 let adjacentRegions = getAdjacentRegions(regionInfo, region);
                 let adjacentRegionNames = Object.keys(adjacentRegions);
                 for (let j = 0; j < adjacentRegionNames.length; j = j + 1) { 
                    let adjacentRegionDesc = adjacentRegionNames[j];
                    let adjacentRegion = adjacentRegions[adjacentRegionDesc];
                    let adjacentRegionName = "N/A";
                    if (adjacentRegion) { adjacentRegionName = adjacentRegion.name; }
                 }
            }
        }
        function getRandomPositionInRegion(regionInfo, region) {
            return new HighFidelityAudio.Point3D({
                "x": (region.x + 0.25 + (0.5 * Math.random())) * regionInfo.regionSize,
                "y": (region.y + 0.25 + (0.5 * Math.random())) * regionInfo.regionSize,
                "z": 0
            });
        }
        function getRandomRegion(regionInfo) {
            let startRegionIndex = Math.floor(Math.random() * regionInfo.regions.length);
            let randomRegion = regionInfo.regions[startRegionIndex];
            return randomRegion;
        }
        function getCurrentRegion(regionInfo, position) {
            var regionCoord = getRegionCoord(regionInfo, position.x, position.y);
            var region = findRegionByRegionCoord(regionInfo, regionCoord.x, regionCoord.y);
            return region;
        }

        function goToRegion(regionInfo, region) {
            let newPosition = getRandomPositionInRegion(regionInfo, region);
            currentPosition.x = newPosition.x;
            currentPosition.y = newPosition.y;
            currentPosition.z = newPosition.z;
            let regionNameTag = document.querySelector(`.ourRegionName`);
            regionNameTag.innerHTML = region.name;
            let regionImage = document.getElementById("regionPictureImage");
            regionImage.src = region.imageUrl;
            regionImage.alt = region.name;
            let buttons = document.getElementsByClassName("directionButton");
            let adjacentRegions = getAdjacentRegions(regionInfo, region);
            for (let i = 0; i < buttons.length; i = i + 1) {
                let button = buttons[i];
                let buttonDirectionMatch = button.id.match(/__(.+)$/);
                if (buttonDirectionMatch) {
                    let direction = buttonDirectionMatch[1];
                    let adjacentRegion = adjacentRegions[direction];
                    if (adjacentRegion) {
                        button.disabled = false;
                        button.innerHTML = adjacentRegion.name + " (" + direction + ")"
                    } else {
                        button.disabled = true;
                        button.innerHTML = "(" + direction + ")"
                    }
                }
            }
        }
        function goDirection(direction) {
            let region = getCurrentRegion(REGION_INFO, currentPosition);
            let adjacentRegions = getAdjacentRegions(REGION_INFO, region);
            let newRegion = adjacentRegions[direction];
            if (newRegion) {
                goToRegion(REGION_INFO, newRegion);
            }
        }
        function goNorth() {
            goDirection("north");
            updateAndTransmit();
        }
        function goSouth() {
            goDirection("south");
            updateAndTransmit();
        }
        function goEast() {
            goDirection("east");
            updateAndTransmit();
        }
        function goWest() {
            goDirection("west");
            updateAndTransmit();
        }
        
        // ctx = the canvas HTML element
        // Thanks Luis :)
        class CanvasHelper {
            static finishPath(ctx, color, width) {
                ctx[(width !== undefined) ? "strokeStyle" : "fillStyle"] = color;
                ctx[(width !== undefined) ? "lineWidth" : ""] = width;
                ctx[(width !== undefined) ? "stroke" : "fill"].call(ctx);
            }
            // Compact function to render circles filled or stroked
            static renderCircle(ctx, x, y, radius, from, to, color, width) {
                ctx.beginPath();
                ctx.arc(x, y, radius, from, to, false);
                CanvasHelper.finishPath(ctx, color, width);
            }
            // Compact function to render polygons filled or stroked
            static renderPolygon(ctx, points, color, width) {
                ctx.beginPath();
                points.forEach((point, i) => {
                    ctx[i === 0 ? "moveTo" : "lineTo"].call(ctx, point[0], point[1]);
                });
                CanvasHelper.finishPath(ctx, color, width);
            }
            // Render text 
            static renderText(ctx, x, y, text, color, size, family) {
                family = family ? family : "console";
                ctx.font = `${size}px ${family}`;
                ctx.fillStyle = color;
                ctx.fillText(text, x, y);
            }
            // World coordenates to canvas conversion
            static worldToCanvasCoords(canvasWidth, canvasHeight, coords, offset, zoom) {
                let relPos = { x: coords.x - offset.x, y: coords.y - offset.y };
                let canvasPos = { x: (0.5 * canvasWidth) - (relPos.x / zoom), y: (0.5 * canvasHeight) - (relPos.y / zoom) };
                return canvasPos;
            }
            // Canvas coordenates to world conversion
            static canvasToWorldCoords(canvasWidth, canvasHeight, coords, offset, zoom) {
                let newLocPos = { x: (coords.x - 0.5 * canvasWidth) * zoom, y: (coords.y - 0.5 * canvasHeight) * zoom, z: 0.0 };
                let npos = { x: offset.x - newLocPos.x, y: offset.y - newLocPos.y, z: offset.z - newLocPos.z };
                return npos;
            }
        }

        let outputAudioEl = document.querySelector(`.outputAudioEl`);
        let userDataContainer__fromServer = document.querySelector(`.userDataContainer__fromServer`);

        let currentPosition = new HighFidelityAudio.Point3D({ "x": 0, "y": 0, "z": 0 });
        let currentOrientationEuler = new HighFidelityAudio.OrientationEuler3D({ "pitchDegrees": 0, "yawDegrees": 270, "rollDegrees": 0 });
        let currentVisit = {};
        currentVisit.id = undefined;

        let ourHashedVisitID = document.querySelector(`.ourHashedVisitID`);
        let ourPositionContainer = document.querySelector(`.ourPositionContainer`);
        updatePositionContainer();
        let ourOrientationContainer = document.querySelector(`.ourOrientationContainer`);
        updateOrientationContainer();

        let connectDisconnectButton = document.querySelector(`.connectDisconnectButton`);
        connectDisconnectButton.addEventListener("click", getUserMediaWrapper);
        connectDisconnectButton.innerHTML = `Click to Connect`;

        let hifiCommunicator = null;

        HighFidelityAudio.HiFiLogger.setHiFiLogLevel(HighFidelityAudio.HiFiLogLevel.Debug);

        async function getUserMediaWrapper() {
            let bestAudioConstraints = HighFidelityAudio.getBestAudioConstraints();
            console.log(`Using the following audio constraints for the user's audio input device:\n${JSON.stringify(bestAudioConstraints)}`);

            let inputAudioMediaStream;
            try {
                inputAudioMediaStream = await navigator.mediaDevices.getUserMedia({ audio: bestAudioConstraints, video: false });
            } catch (e) {
                console.error(`Call to \`getUserMedia()\` failed! Error:\n${e}`);
                return;
            }

            connectDisconnectButton.disabled = true;
            connectDisconnectButton.innerHTML = `wait...`;
            await connectToHiFiAudio(inputAudioMediaStream);
        }

        function onConnectionStateChanged(newConnectionState) {
            console.log(`New High Fidelity connection state: ${newConnectionState}`);
            if (newConnectionState === HighFidelityAudio.HiFiConnectionStates.Disconnected || newConnectionState === HighFidelityAudio.HiFiConnectionStates.Failed) {
                disconnectFromHiFiAudio();
            }
        }

        function updateAllUserDataDiv() {
            userDataContainer__fromServer.innerHTML = `<h2 class="userDataTitle">All User Data Reported By Server (Including Ours)</h2>`;

            for (let i = 0; i < allUserDataFromServer.length; i++) {
                let currentDiv = document.createElement('div');
                currentDiv.classList.add("userData");
                currentDiv.innerHTML += `<p>Provided User ID: ${allUserDataFromServer[i].providedUserID ? allUserDataFromServer[i].providedUserID : "&#60;unknown&#62;"}</p>`;
                currentDiv.innerHTML += `<p>Hashed Visit ID: ${allUserDataFromServer[i].hashedVisitID ? allUserDataFromServer[i].hashedVisitID : "&#60;unknown&#62;"}</p>`;
                currentDiv.innerHTML += `<p>Position: ${allUserDataFromServer[i].position ? JSON.stringify(allUserDataFromServer[i].position) : "&#60;unknown&#62;"}</p>`;
                currentDiv.innerHTML += `<p>Orientation: ${allUserDataFromServer[i].orientationEuler ? JSON.stringify(allUserDataFromServer[i].orientationEuler) : "&#60;unknown&#62;"}</p>`;
                currentDiv.innerHTML += `<p>Volume (dB): ${allUserDataFromServer[i].volumeDecibels ? allUserDataFromServer[i].volumeDecibels : "&#60;unknown&#62;"}</p>`;
                userDataContainer__fromServer.appendChild(currentDiv);
            }
        }

        let allUserDataFromServer = [];
        function onNewUserDataReceived(receivedHiFiAudioAPIDataArray) {
            let dataUpdated = false;

            for (let recdItr = 0; recdItr < receivedHiFiAudioAPIDataArray.length; recdItr++) {
                let currentDataFromServer = receivedHiFiAudioAPIDataArray[recdItr];

                // We can't do anything with user data that doesn't contain a User ID or Hashed Visit ID.
                if (!currentDataFromServer.providedUserID && !currentDataFromServer.hashedVisitID) {
                    continue;
                }

                let isNewUser = true;
                for (let allItr = 0; allItr < allUserDataFromServer.length; allItr++) {
                    if ((currentDataFromServer.providedUserID && currentDataFromServer.providedUserID === allUserDataFromServer[allItr].providedUserID) ||
                        currentDataFromServer.hashedVisitID && currentDataFromServer.hashedVisitID === allUserDataFromServer[allItr].hashedVisitID) {
                        isNewUser = false;
                        dataUpdated = true;

                        if (currentDataFromServer.position) {
                            if (!allUserDataFromServer[allItr].position) {
                                allUserDataFromServer[allItr].position = new HighFidelityAudio.Point3D();
                            }

                            if (typeof (currentDataFromServer.position.x) === "number") {
                                allUserDataFromServer[allItr].position.x = currentDataFromServer.position.x;
                            }
                            if (typeof (currentDataFromServer.position.y) === "number") {
                                allUserDataFromServer[allItr].position.y = currentDataFromServer.position.y;
                            }
                            if (typeof (currentDataFromServer.position.z) === "number") {
                                allUserDataFromServer[allItr].position.z = currentDataFromServer.position.z;
                            }
                        }

                        if (currentDataFromServer.orientationEuler) {
                            if (!allUserDataFromServer[allItr].orientationEuler) {
                                allUserDataFromServer[allItr].orientationEuler = new HighFidelityAudio.OrientationEuler3D();
                            }

                            if (typeof (currentDataFromServer.orientationEuler.pitchDegrees) === "number") {
                                allUserDataFromServer[allItr].orientationEuler.pitchDegrees = currentDataFromServer.orientationEuler.pitchDegrees;
                            }
                            if (typeof (currentDataFromServer.orientationEuler.yawDegrees) === "number") {
                                allUserDataFromServer[allItr].orientationEuler.yawDegrees = currentDataFromServer.orientationEuler.yawDegrees;
                            }
                            if (typeof (currentDataFromServer.orientationEuler.rollDegrees) === "number") {
                                allUserDataFromServer[allItr].orientationEuler.rollDegrees = currentDataFromServer.orientationEuler.rollDegrees;
                            }
                        }

                        if (typeof (currentDataFromServer.volumeDecibels) === "number") {
                            allUserDataFromServer[allItr].volumeDecibels = currentDataFromServer.volumeDecibels;
                        }
                        break;
                    }
                }

                if (isNewUser) {
                    allUserDataFromServer.push(currentDataFromServer);
                    dataUpdated = true;
                }
            }

            if (dataUpdated) {
                updateAllUserDataDiv();
            }
        }

        async function connectToHiFiAudio(inputAudioMediaStream) {
            console.log(`Connecting to High Fidelity Audio API Servers...`);

            let initialHiFiAudioAPIData = new HighFidelityAudio.HiFiAudioAPIData({
                position: currentPosition,
                orientationEuler: currentOrientationEuler,
            });

            hifiCommunicator = new HighFidelityAudio.HiFiCommunicator({
                initialHiFiAudioAPIData: initialHiFiAudioAPIData,
                onConnectionStateChanged: onConnectionStateChanged
            });
            await hifiCommunicator.setInputAudioMediaStream(inputAudioMediaStream, false);

            const HIFI_AUDIO_JWT = '<%- hiFiJWT %>';
            let connectResponse;
            try {
                connectResponse = await hifiCommunicator.connectToHiFiAudioAPIServer(HIFI_AUDIO_JWT);
            } catch (e) {
                console.error(`Call to \`connectToHiFiAudioAPIServer()\` failed! Error:\n${JSON.stringify(e)}`);
                connectDisconnectButton.disabled = false;
                connectDisconnectButton.innerHTML = `Click to Connect`;
                return;
            }

            console.log(`Call to \`connectToHiFiAudioAPIServer()\` succeeded! Response:\n${JSON.stringify(connectResponse)}`);
            console.log(`Our \`hashedVisitID\` is:\n${connectResponse.audionetInitResponse.visit_id_hash}`);
            ourHashedVisitID.innerHTML = `Hashed Visit ID: ${connectResponse.audionetInitResponse.visit_id_hash}`;
            currentVisit.id = connectResponse.audionetInitResponse.visit_id_hash;

            // This will get all Position and Orientation updates for all Users (including ourselves).
            let newUserDataSubscription = new HighFidelityAudio.UserDataSubscription({
                "components": [
                    HighFidelityAudio.AvailableUserDataSubscriptionComponents.Position,
                    HighFidelityAudio.AvailableUserDataSubscriptionComponents.OrientationEuler,
                    HighFidelityAudio.AvailableUserDataSubscriptionComponents.VolumeDecibels
                ],
                "callback": (receivedHiFiAudioAPIDataArray) => {
                    onNewUserDataReceived(receivedHiFiAudioAPIDataArray);
                }
            });
            hifiCommunicator.addUserDataSubscription(newUserDataSubscription);

            connectDisconnectButton.removeEventListener("click", getUserMediaWrapper);
            connectDisconnectButton.addEventListener("click", disconnectFromHiFiAudio);
            connectDisconnectButton.disabled = false;
            connectDisconnectButton.innerHTML = `Click to Disconnect`;

            outputAudioEl.srcObject = hifiCommunicator.getOutputAudioMediaStream();
            // We must call `play()` here because certain browsers won't autoplay this stream as we expect.
            outputAudioEl.play();
        }

        async function disconnectFromHiFiAudio() {
            console.log(`Disconnecting from High Fidelity Audio API Servers...`);

            connectDisconnectButton.removeEventListener("click", disconnectFromHiFiAudio);
            connectDisconnectButton.addEventListener("click", getUserMediaWrapper);
            connectDisconnectButton.disabled = false;
            connectDisconnectButton.innerHTML = `Click to Connect`;

            let disconnectStatus = await hifiCommunicator.disconnectFromHiFiAudioAPIServer();
            hifiCommunicator = null;
            console.log(disconnectStatus);
            allUserDataFromServer.length = 0;
        }

        function updatePositionContainer() {
            ourPositionContainer.innerHTML = `Position: ${currentPosition ? JSON.stringify(currentPosition) : "&#60;unknown&#62;"}`;
        }

        function updateOrientationContainer() {
            ourOrientationContainer.innerHTML = `Orientation: ${currentOrientationEuler ? JSON.stringify(currentOrientationEuler) : "&#60;unknown&#62;"}`;
        }

        function updateAndTransmit() {
            updateOrientationContainer();
            updatePositionContainer();
            transmitHiFiAudioAPIDataToMixer();
        }

        function transmitHiFiAudioAPIDataToMixer() {
            if (!hifiCommunicator) {
                return;
            }

            console.log(hifiCommunicator.updateUserDataAndTransmit({
                position: currentPosition,
                orientationEuler: currentOrientationEuler,
            }));
        }

        // Load the map!
        let mapReq = new XMLHttpRequest();
        mapReq.addEventListener("load", function() {
            let newRegionInfo = JSON.parse(this.responseText);
            let regionInfoParts = Object.keys(newRegionInfo);
            for (let i = 0; i < regionInfoParts.length; i = i + 1) {
                let key = regionInfoParts[i];
                REGION_INFO[key] = newRegionInfo[key];
            }
            goToRegion(REGION_INFO, getRandomRegion(REGION_INFO));
        });
        let urlParamString = document.URL.split("?")[1] || "map=./maps/alliteration_nation.json";
        let urlParams = new URLSearchParams(urlParamString);
        mapReq.open("GET", urlParams.get("map"));
        mapReq.send();

        let talkParams = {
            dbMemory: 500,
            startThresholdPercent: 0.9,
            endThresholdPercent: 0.85,
            minTalkDb: -50,
            cooldownTime: 50,
            animateTime: 400
        };
        function updateTalkStates(dt, talkStates, users) {
            let newTalkStates = {};
            let minmaxWeight = (talkParams.dbMemory - Math.min(100, dt)) / talkParams.dbMemory;
            let nowWeight = Math.min(100, dt) / talkParams.dbMemory;

            // Update talk states for each supplied user
            for (let i = 0; i < users.length; i = i + 1) {
                let user = users[i];
                let newTalkState = {};
                newTalkStates[user.providedUserID] = newTalkState;
                let oldTalkState = talkStates[user.providedUserID] || {
                    minDb: 120,
                    maxDb: -120,
                    currentDb: -120,
                    lastDb: -120,
                    aboveThreshold: false,
                    cooldown: Math.random() * talkParams.cooldownTime,
                    animates: []
                };
                // Calculate running average min/max db to find the appropriate thresholds for talking animations
                newTalkState.minDb = (minmaxWeight * Math.min(user.volumeDecibels, oldTalkState.minDb)) + (nowWeight * user.volumeDecibels);
                newTalkState.maxDb = (minmaxWeight * Math.max(user.volumeDecibels, oldTalkState.maxDb)) + (nowWeight * user.volumeDecibels);
                newTalkState.lastDb = oldTalkState.currentDb;
                newTalkState.currentDb = user.volumeDecibels;
                // Count down animation counters
                let canAddAnimate = oldTalkState.cooldown == 0;
                newTalkState.cooldown = Math.max(0, oldTalkState.cooldown - dt);
                newTalkState.animates = [];
                for (let j = 0; j < oldTalkState.animates.length; j = j + 1) {
                    let oldAnimate = oldTalkState.animates[j];
                    let animate = Math.max(-0.1, oldAnimate - dt);
                    if (animate >= 0) {
                        newTalkState.animates.push(animate);
                    }
                }
                // Determine if a user's speech passes above some threshold, with some hysteresis
                newTalkState.aboveThreshold = oldTalkState.aboveThreshold;
                if (oldTalkState.minDb < oldTalkState.maxDb && user.volumeDecibels > talkParams.minTalkDb) {
                    let startThresholdDb = oldTalkState.minDb + (talkParams.startThresholdPercent * (oldTalkState.maxDb - oldTalkState.minDb));
                    let endThresholdDb = oldTalkState.minDb + (talkParams.endThresholdPercent * (oldTalkState.maxDb - oldTalkState.minDb));
                    if (!oldTalkState.aboveThreshold) {
                        if (user.volumeDecibels > startThresholdDb) {
                            newTalkState.aboveThreshold = true;
                        }
                    } else {
                        if (user.volumeDecibels < endThresholdDb) {
                            newTalkState.aboveThreshold = false;
                        }
                    }
                }
                // If user's speech passes a threshold, start an animation
                if (canAddAnimate && newTalkState.aboveThreshold && !oldTalkState.aboveThreshold) {
                    newTalkState.animates.push(talkParams.animateTime);
                    newTalkState.cooldown = talkParams.cooldownTime;
                }
            }

            // Set updated talk states in the map
            let activeUsernames = Object.keys(newTalkStates);
            for (let i = 0; i < activeUsernames.length; i = i + 1) {
                let username = activeUsernames[i];
                talkStates[username] = newTalkStates[username];
            }

            // Clean up talk states not in user list
            let potentiallyStaleUsernames = Object.keys(talkStates);
            for (let i = 0; i < potentiallyStaleUsernames.length; i = i + 1) {
                let potentiallyStaleUsername = potentiallyStaleUsernames[i];
                if (!newTalkStates[potentiallyStaleUsername]) {
                    delete talkStates[potentiallyStaleUsername];
                }
            }
        }
        // DRAW STUFF (when we're ready...)
        function isClient(user) {
            // TODO: Figure out why hashedVisitID from server is equal to our hashedVisitId on first connect but different on later connects without refreshing the page
            //return user.hashedVisitID == currentVisit.id;
            return user.providedUserID == "<%- providedUserID %>";
        }
        function drawUser(canvas, regionInfo, region, position, isClient, talkState) {
            var canvasCoords = CanvasHelper.worldToCanvasCoords(canvas.scrollWidth, canvas.scrollHeight, position, {x: (region.x + 0.5) * regionInfo.regionSize, y: (region.y + 0.5) * regionInfo.regionSize}, regionInfo.regionSize / canvas.scrollHeight);
            CTX.translate(canvasCoords.x, canvasCoords.y);

            let circleRadius = 8;
            if (isClient) {
                circleRadius = 16;
            }
            // Render the talk pulsating animations
            let animates = talkState.animates;
            let animRadiusStart = circleRadius * 0.25;
            let animRadiusEnd = circleRadius * 2.25;
            let animAlphaStart = 0.5;
            let animAlphaEnd = 0.1;
            for (let i = 0; i < animates.length; i = i + 1) {
                let animate = animates[i];
                let animPercent = (talkParams.animateTime - animate) / talkParams.animateTime;
                let animPercentInverse = 1.0 - animPercent;
                let animRadius = (animPercentInverse * animRadiusStart) + (animPercent * animRadiusEnd);
                let animAlpha = (animPercentInverse * animAlphaStart) + (animPercent * animAlphaEnd);
                CanvasHelper.renderCircle(CTX, 0, 0, animRadius, 0, 2.0 * Math.PI, 'rgba(255, 255, 255, ' + animAlpha + ')', undefined);
            }
            // Render the base circle of the user
            CanvasHelper.renderCircle(CTX, 0, 0, circleRadius, 0, 2.0 * Math.PI, 'rgba(255, 255, 255, 0.5)', undefined);
            CanvasHelper.renderCircle(CTX, 0, 0, circleRadius, 0, 2.0 * Math.PI, 'rgba(30, 30, 30, 1.0)', 1);

            CTX.translate(-canvasCoords.x, -canvasCoords.y);
        }
        var lastT = 0;
        function doDraw(t) {
            let dt = Math.max(0, t - lastT);
            lastT = t;
            if (typeof(currentPosition) == "undefined") {
                return;
            }
            if (Object.keys(REGION_INFO).length == 0) {
                return;
            }
            let region = getCurrentRegion(REGION_INFO, currentPosition);

            CTX.clearRect(0, 0, CANVAS.width, CANVAS.height);
            CTX.resetTransform();

            updatedUsers = [];

            for (let i = 0; i < allUserDataFromServer.length; i = i + 1) {
                let user = allUserDataFromServer[i];
                if (!user || !user.position) {
                    continue;
                }

                if (isClient(user)) {
                    updatedUsers.push(user);
                    continue;
                }

                let userRegion = getCurrentRegion(REGION_INFO, user.position);
                if (userRegion.x != region.x || userRegion.y != region.y) {
                    continue;
                }

                updatedUsers.push(user);
            }

            updateTalkStates(dt, TALK_STATES, updatedUsers);

            for (let i = 0; i < updatedUsers.length; i = i + 1) {
                let user = updatedUsers[i];
                drawUser(CANVAS, REGION_INFO, region, user.position, isClient(user), TALK_STATES[user.providedUserID]);
            }
        }
        function draw(t) {
            doDraw(t);
            window.requestAnimationFrame(draw);
        }
        draw();
    </script>
</body>

</html>