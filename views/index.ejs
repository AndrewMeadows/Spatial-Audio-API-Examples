<!doctype html>

<html lang="en">

<head>
    <meta charset="utf-8">
    <title>High Fidelity Spatial Audio API - Express & EJS Web App</title>
    <style>
        body {
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
        }

        h2 {
            margin: 2px 0 4px 0;
        }

        .connectDisconnectButton {
            width: 200px;
            height: 100px;
            margin: 0 auto;
        }

        .outputAudioEl {
            width: 300px;
            height: 50px;
            margin: 0;
        }

        .buttonContainer {
            display: flex;
            flex-wrap: wrap;
        }

        .buttonContainer>div {
            margin: 8px 8px;
        }

        .buttonContainer>div>button {
            width: 70px;
            height: 50px;
            margin: 0;
        }

        .userDataTitle {
            width: 100%;
            font-weight: bold;
            margin: 4px 12px 2px 12px;
        }

        .userDataContainer {
            display: flex;
            flex-wrap: wrap;
            margin: 6px 4px;
            font-family: 'Courier New', Courier, monospace;
            font-size: 12px;
        }

        .userDataContainer__fromServer {
            display: none;
        }

        .userData {
            margin: 8px;
        }

        .userData>p {
            margin: 0;
        }

        .regionContainer * {
            position:absolute;
        }
        .regionContainer .regionPictureContainer {
            z-index: 0;
        }
        .regionContainer .theCanvas {
            z-index: 1;
        }
    </style>
</head>

<body>
    <div>
        <button class="connectDisconnectButton"></button>
        <audio controls autoplay class="outputAudioEl"></audio>
    </div>

    <div class="userDataContainer userDataContainer__ours">
        <h2 class="userDataTitle">Our Local User Data:</h2>
        <div class="userData">
            <p class="ourProvidedUserID">Provided User ID: <%- providedUserID %></p>
            <p class="ourHashedVisitID"></p>
            <p class="ourPositionContainer"></p>
            <p class="ourOrientationContainer"></p>
        </div>
    </div>

    <div class="computedDataContainer computedDataContainer__ours">
        <h2 class="computedDataTitle">Computed Data:</h2>
        <div class="computedData">
            <p class="ourRegionName"></p>
        </div>
    </div>

    <div class="buttonContainer">
        <div>
            <button id="button__north" class="directionButton" onclick="goNorth()">North</button>
        </div>
        <div>
            <button id="button__west" class="directionButton" onclick="goWest()">West</button>
            <button id="button__east" class="directionButton" onclick="goEast()">East</button>
        </div>
        <div>
            <button id="button__south" class="directionButton" onclick="goSouth()">South</button>
        </div>
    </div>

    <div class="userDataContainer userDataContainer__fromServer"></div>

    <div class="regionContainer">
        <div class="regionPictureContainer">
            <img id="regionPictureImage" src="" style="width:400px;height:400px;" />
        </div>
        <canvas class="thecanvas" tabindex="1" style="width:400px;height:400px;" height="400px" width="400px"></canvas>
    </div>

    <script src="https://hifi-spatial-audio-api.s3.amazonaws.com/releases/latest/HighFidelityAudio-latest.js"></script>
    <script>
        let REGION_INFO = {
            "regionSize": 5,
            "regions": [
                // <span>Photo by <a href="https://unsplash.com/@lyovon?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Levon Vardanyan</a> on <a href="https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></span>
                {x: -1, y: 0, name: "Awesome Area", imageUrl: "./images/levon-vardanyan-phYeAlPwHrg-unsplash_800.jpg"},
                // <span>Photo by <a href="https://unsplash.com/@eugene_kuznetsov?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Eugene Kuznetsov</a> on <a href="https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></span>
                {x: 0, y: 0, name: "Peaceful Pond", imageUrl: "./images/eugene-kuznetsov-qBJmwk9m4z0-unsplash_800.jpg"},
                // <span>Photo by <a href="https://unsplash.com/@ledi777?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Jocelyne Yvonne</a> on <a href="https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></span>
                {x: 1, y: 0, name: "Fanciful Forest", imageUrl: "./images/jocelyne-yvonne-MCpBIwisljo-unsplash_800.jpg"},
                // <span>Photo by <a href="https://unsplash.com/@j_lam83?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Jason Lam</a> on <a href="https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></span>
                {x: 0, y: -1, name: "Zen Zeppelin Port", imageUrl: "./images/jason-lam-78aCYD_pQgg-unsplash_800.jpg"}
            ]
        };
        let CANVAS = document.querySelector('.thecanvas');
        CANVAS.width = CANVAS.scrollWidth;
        CANVAS.height = CANVAS.scrollHeight;
        let CTX = CANVAS.getContext("2d");

        function findRegionByRegionCoord(regionInfo, x, y) {
            for (let i = 0; i < regionInfo.regions.length; i = i + 1) {
                let region = regionInfo.regions[i];
                if (region.x == x && region.y == y) {
                    return region;
                }
            }
            return undefined;
        }
        function getRegionCoord(regionInfo, x, y) {
            return {x: Math.floor(x / regionInfo.regionSize), y: Math.floor(y / regionInfo.regionSize)};
        }
        function findRegionByName(regionInfo, name) {
            for (let i = 0; i < regionInfo.regions.length; i = i + 1) {
                let region = regionInfo.regions[i];
                if (region.name == name) {
                    return region;
                }
            }
            return undefined;
        }
        let DEFAULT_REGION = findRegionByName(REGION_INFO, name);
        function getAdjacentRegions(regionInfo, region) {
            return {
                "west": findRegionByRegionCoord(regionInfo, region.x - 1, region.y),
                "east": findRegionByRegionCoord(regionInfo, region.x + 1, region.y),
                "north": findRegionByRegionCoord(regionInfo, region.x, region.y - 1),
                "south": findRegionByRegionCoord(regionInfo, region.x, region.y + 1)
            };
        }
        function debugRegions(regionInfo) {
            for (let i = 0; i < regionInfo.regions.length; i = i + 1) {
                 let region = regionInfo.regions[i];
                 console.log("Adjacent regions for " + region.name + ": ");
                 let adjacentRegions = getAdjacentRegions(regionInfo, region);
                 let adjacentRegionNames = Object.keys(adjacentRegions);
                 for (let j = 0; j < adjacentRegionNames.length; j = j + 1) { 
                    let adjacentRegionDesc = adjacentRegionNames[j];
                    let adjacentRegion = adjacentRegions[adjacentRegionDesc];
                    let adjacentRegionName = "N/A";
                    if (adjacentRegion) { adjacentRegionName = adjacentRegion.name; }
                    console.log("    " + adjacentRegionDesc + ": " + adjacentRegionName)
                 }
            }
        }
        function getRandomPositionInRegion(regionInfo, region) {
            return new HighFidelityAudio.Point3D({
                "x": (region.x + Math.random()) * regionInfo.regionSize,
                "y": (region.y + Math.random()) * regionInfo.regionSize,
                "z": 0
            });
        }
        function getRandomRegion(regionInfo) {
            let startRegionIndex = Math.floor(Math.random() * regionInfo.regions.length);
            let randomRegion = regionInfo.regions[startRegionIndex];
            return randomRegion;
        }
        function getCurrentRegion(regionInfo, position) {
            var regionCoord = getRegionCoord(regionInfo, position.x, position.y);
            var region = findRegionByRegionCoord(regionInfo, regionCoord.x, regionCoord.y);
            return region;
        }

        function goToRegion(regionInfo, region) {
            let newPosition = getRandomPositionInRegion(regionInfo, region);
            currentPosition = newPosition;
            let regionNameTag = document.querySelector(`.ourRegionName`);
            regionNameTag.innerHTML = "You are at " + region.name;
            let regionImage = document.getElementById("regionPictureImage");
            regionImage.src = region.imageUrl;
            regionImage.alt = region.name;
            let buttons = document.querySelector(".buttonContainer").getElementsByTagName("button");
            let adjacentRegions = getAdjacentRegions(regionInfo, region);
            for (let i = 0; i < buttons.length; i = i + 1) {
                let button = buttons[i];
                let buttonDirectionMatch = button.id.match(/__(.+)$/);
                if (buttonDirectionMatch) {
                    let direction = buttonDirectionMatch[1];
                    let adjacentRegion = adjacentRegions[direction];
                    if (adjacentRegion) {
                        button.disabled = false;
                        button.innerHTML = adjacentRegion.name + " (" + direction + ")"
                    } else {
                        button.disabled = true;
                        button.innerHTML = "(" + direction + ")"
                    }
                }
            }
        }
        function goDirection(direction) {
            let region = getCurrentRegion(REGION_INFO, currentPosition);
            let adjacentRegions = getAdjacentRegions(REGION_INFO, region);
            let newRegion = adjacentRegions[direction];
            if (newRegion) {
                goToRegion(REGION_INFO, newRegion);
            }
        }
        function goNorth() {
            goDirection("north");
            updateAndTransmit();
        }
        function goSouth() {
            goDirection("south");
            updateAndTransmit();
        }
        function goEast() {
            goDirection("east");
            updateAndTransmit();
        }
        function goWest() {
            goDirection("west");
            updateAndTransmit();
        }
        
        // ctx = the canvas HTML element
        // Thanks Luis :)
        class CanvasHelper {
            static finishPath(ctx, color, width) {
                ctx[(width !== undefined) ? "strokeStyle" : "fillStyle"] = color;
                ctx[(width !== undefined) ? "lineWidth" : ""] = width;
                ctx[(width !== undefined) ? "stroke" : "fill"].call(ctx);
            }
            // Compact function to render circles filled or stroked
            static renderCircle(ctx, x, y, radius, from, to, color, width) {
                ctx.beginPath();
                ctx.arc(x, y, radius, from, to, false);
                CanvasHelper.finishPath(ctx, color, width);
            }
            // Compact function to render polygons filled or stroked
            static renderPolygon(ctx, points, color, width) {
                ctx.beginPath();
                points.forEach((point, i) => {
                    ctx[i === 0 ? "moveTo" : "lineTo"].call(ctx, point[0], point[1]);
                });
                CanvasHelper.finishPath(ctx, color, width);
            }
            // Render text 
            static renderText(ctx, x, y, text, color, size, family) {
                family = family ? family : "console";
                ctx.font = `${size}px ${family}`;
                ctx.fillStyle = color;
                ctx.fillText(text, x, y);
            }
            // World coordenates to canvas conversion
            static worldToCanvasCoords(canvasWidth, canvasHeight, coords, offset, zoom) {
                console.log(`worldToCanvasCoords: canvasWidth: ${canvasWidth}, canvasHeight: ${canvasHeight}, coords: ${JSON.stringify(coords)}, offset: ${JSON.stringify(offset)}, zoom: ${zoom}`)
                let relPos = { x: coords.x - offset.x, y: coords.y - offset.y };
                console.log(`relPos: ${JSON.stringify(relPos)}`)
                let canvasPos = { x: (0.5 * canvasWidth) - (relPos.x / zoom), y: (0.5 * canvasHeight) - (relPos.y / zoom) };
                console.log(`canvasPos: ${JSON.stringify(canvasPos)}`)
                return canvasPos;
            }
            // Canvas coordenates to world conversion
            static canvasToWorldCoords(canvasWidth, canvasHeight, coords, offset, zoom) {
                let newLocPos = { x: (coords.x - 0.5 * canvasWidth) * zoom, y: (coords.y - 0.5 * canvasHeight) * zoom, z: 0.0 };
                let npos = { x: offset.x - newLocPos.x, y: offset.y - newLocPos.y, z: offset.z - newLocPos.z };
                return npos;
            }
        }
        function draw(t){
            if (typeof(currentPosition) == "undefined") {
                return;
            }
            let region = getCurrentRegion(REGION_INFO, currentPosition);
            let zoom = 5;

            CTX.clearRect(0, 0, CANVAS.width, CANVAS.height);
            CTX.resetTransform();

            for (let i = 0; i < allUserDataFromServer.length; i++) {
                let user = allUserDataFromServer[i];
                if (!user || !user.position) {
                    continue;
                }

                let userRegion = getCurrentRegion(REGION_INFO, user.position);
                if (userRegion != region) {
                    continue;
                }
                console.log("user.position: " + JSON.stringify(user.position));
                var canvasCoords = CanvasHelper.worldToCanvasCoords(CANVAS.scrollWidth, CANVAS.scrollHeight, user.position, {x: (region.x + 0.5) * REGION_INFO.regionSize, y: (region.y + 0.5) * REGION_INFO.regionSize}, REGION_INFO.regionSize / CANVAS.scrollHeight);
                console.log("canvasCoords: " + JSON.stringify(canvasCoords));
                CTX.translate(canvasCoords.x, canvasCoords.y);
                CanvasHelper.renderCircle(CTX, 0, 0, 8, 0, 2.0 * Math.PI, 'rgba(255, 0, 0, 0.5)', undefined);
                CTX.resetTransform();
            }

            window.requestAnimationFrame(draw);
        }

        let outputAudioEl = document.querySelector(`.outputAudioEl`);
        let userDataContainer__fromServer = document.querySelector(`.userDataContainer__fromServer`);

        let currentPosition = new HighFidelityAudio.Point3D({ "x": 0, "y": 0, "z": 0 });
        let currentOrientationEuler = new HighFidelityAudio.OrientationEuler3D({ "pitchDegrees": 0, "yawDegrees": 270, "rollDegrees": 0 });
        goToRegion(REGION_INFO, getRandomRegion(REGION_INFO));

        let ourHashedVisitID = document.querySelector(`.ourHashedVisitID`);
        let ourPositionContainer = document.querySelector(`.ourPositionContainer`);
        updatePositionContainer();
        let ourOrientationContainer = document.querySelector(`.ourOrientationContainer`);
        updateOrientationContainer();

        let connectDisconnectButton = document.querySelector(`.connectDisconnectButton`);
        connectDisconnectButton.addEventListener("click", getUserMediaWrapper);
        connectDisconnectButton.innerHTML = `Click to Connect`;

        let hifiCommunicator = null;

        HighFidelityAudio.HiFiLogger.setHiFiLogLevel(HighFidelityAudio.HiFiLogLevel.Debug);

        async function getUserMediaWrapper() {
            let bestAudioConstraints = HighFidelityAudio.getBestAudioConstraints();
            console.log(`Using the following audio constraints for the user's audio input device:\n${JSON.stringify(bestAudioConstraints)}`);

            let inputAudioMediaStream;
            try {
                inputAudioMediaStream = await navigator.mediaDevices.getUserMedia({ audio: bestAudioConstraints, video: false });
            } catch (e) {
                console.error(`Call to \`getUserMedia()\` failed! Error:\n${e}`);
                return;
            }

            connectDisconnectButton.disabled = true;
            connectDisconnectButton.innerHTML = `wait...`;
            await connectToHiFiAudio(inputAudioMediaStream);
        }

        function onConnectionStateChanged(newConnectionState) {
            console.log(`New High Fidelity connection state: ${newConnectionState}`);
            if (newConnectionState === HighFidelityAudio.HiFiConnectionStates.Disconnected || newConnectionState === HighFidelityAudio.HiFiConnectionStates.Failed) {
                disconnectFromHiFiAudio();
            }
        }

        function updateAllUserDataDiv() {
            userDataContainer__fromServer.innerHTML = `<h2 class="userDataTitle">All User Data Reported By Server (Including Ours)</h2>`;

            for (let i = 0; i < allUserDataFromServer.length; i++) {
                let currentDiv = document.createElement('div');
                currentDiv.classList.add("userData");
                currentDiv.innerHTML += `<p>Provided User ID: ${allUserDataFromServer[i].providedUserID ? allUserDataFromServer[i].providedUserID : "&#60;unknown&#62;"}</p>`;
                currentDiv.innerHTML += `<p>Hashed Visit ID: ${allUserDataFromServer[i].hashedVisitID ? allUserDataFromServer[i].hashedVisitID : "&#60;unknown&#62;"}</p>`;
                currentDiv.innerHTML += `<p>Position: ${allUserDataFromServer[i].position ? JSON.stringify(allUserDataFromServer[i].position) : "&#60;unknown&#62;"}</p>`;
                currentDiv.innerHTML += `<p>Orientation: ${allUserDataFromServer[i].orientationEuler ? JSON.stringify(allUserDataFromServer[i].orientationEuler) : "&#60;unknown&#62;"}</p>`;
                currentDiv.innerHTML += `<p>Volume (dB): ${allUserDataFromServer[i].volumeDecibels ? allUserDataFromServer[i].volumeDecibels : "&#60;unknown&#62;"}</p>`;
                userDataContainer__fromServer.appendChild(currentDiv);
            }
        }

        let allUserDataFromServer = [];
        function onNewUserDataReceived(receivedHiFiAudioAPIDataArray) {
            let dataUpdated = false;

            for (let recdItr = 0; recdItr < receivedHiFiAudioAPIDataArray.length; recdItr++) {
                let currentDataFromServer = receivedHiFiAudioAPIDataArray[recdItr];

                // We can't do anything with user data that doesn't contain a User ID or Hashed Visit ID.
                if (!currentDataFromServer.providedUserID && !currentDataFromServer.hashedVisitID) {
                    continue;
                }

                let isNewUser = true;
                for (let allItr = 0; allItr < allUserDataFromServer.length; allItr++) {
                    if ((currentDataFromServer.providedUserID && currentDataFromServer.providedUserID === allUserDataFromServer[allItr].providedUserID) ||
                        currentDataFromServer.hashedVisitID && currentDataFromServer.hashedVisitID === allUserDataFromServer[allItr].hashedVisitID) {
                        isNewUser = false;
                        dataUpdated = true;

                        if (currentDataFromServer.position) {
                            if (!allUserDataFromServer[allItr].position) {
                                allUserDataFromServer[allItr].position = new HighFidelityAudio.Point3D();
                            }

                            if (typeof (currentDataFromServer.position.x) === "number") {
                                allUserDataFromServer[allItr].position.x = currentDataFromServer.position.x;
                            }
                            if (typeof (currentDataFromServer.position.y) === "number") {
                                allUserDataFromServer[allItr].position.y = currentDataFromServer.position.y;
                            }
                            if (typeof (currentDataFromServer.position.z) === "number") {
                                allUserDataFromServer[allItr].position.z = currentDataFromServer.position.z;
                            }
                        }

                        if (currentDataFromServer.orientationEuler) {
                            if (!allUserDataFromServer[allItr].orientationEuler) {
                                allUserDataFromServer[allItr].orientationEuler = new HighFidelityAudio.OrientationEuler3D();
                            }

                            if (typeof (currentDataFromServer.orientationEuler.pitchDegrees) === "number") {
                                allUserDataFromServer[allItr].orientationEuler.pitchDegrees = currentDataFromServer.orientationEuler.pitchDegrees;
                            }
                            if (typeof (currentDataFromServer.orientationEuler.yawDegrees) === "number") {
                                allUserDataFromServer[allItr].orientationEuler.yawDegrees = currentDataFromServer.orientationEuler.yawDegrees;
                            }
                            if (typeof (currentDataFromServer.orientationEuler.rollDegrees) === "number") {
                                allUserDataFromServer[allItr].orientationEuler.rollDegrees = currentDataFromServer.orientationEuler.rollDegrees;
                            }
                        }

                        if (typeof (currentDataFromServer.volumeDecibels) === "number") {
                            allUserDataFromServer[allItr].volumeDecibels = currentDataFromServer.volumeDecibels;
                        }
                        break;
                    }
                }

                if (isNewUser) {
                    allUserDataFromServer.push(currentDataFromServer);
                    dataUpdated = true;
                }
            }

            if (dataUpdated) {
                updateAllUserDataDiv();
            }
        }

        async function connectToHiFiAudio(inputAudioMediaStream) {
            console.log(`Connecting to High Fidelity Audio API Servers...`);

            let initialHiFiAudioAPIData = new HighFidelityAudio.HiFiAudioAPIData({
                position: currentPosition,
                orientationEuler: currentOrientationEuler,
            });

            hifiCommunicator = new HighFidelityAudio.HiFiCommunicator({
                initialHiFiAudioAPIData: initialHiFiAudioAPIData,
                onConnectionStateChanged: onConnectionStateChanged
            });
            await hifiCommunicator.setInputAudioMediaStream(inputAudioMediaStream, false);

            const HIFI_AUDIO_JWT = '<%- hiFiJWT %>';
            let connectResponse;
            try {
                connectResponse = await hifiCommunicator.connectToHiFiAudioAPIServer(HIFI_AUDIO_JWT);
            } catch (e) {
                console.error(`Call to \`connectToHiFiAudioAPIServer()\` failed! Error:\n${JSON.stringify(e)}`);
                connectDisconnectButton.disabled = false;
                connectDisconnectButton.innerHTML = `Click to Connect`;
                return;
            }

            console.log(`Call to \`connectToHiFiAudioAPIServer()\` succeeded! Response:\n${JSON.stringify(connectResponse)}`);
            console.log(`Our \`hashedVisitID\` is:\n${connectResponse.audionetInitResponse.visit_id_hash}`);
            ourHashedVisitID.innerHTML = `Hashed Visit ID: ${connectResponse.audionetInitResponse.visit_id_hash}`;

            // This will get all Position and Orientation updates for all Users (including ourselves).
            let newUserDataSubscription = new HighFidelityAudio.UserDataSubscription({
                "components": [
                    HighFidelityAudio.AvailableUserDataSubscriptionComponents.Position,
                    HighFidelityAudio.AvailableUserDataSubscriptionComponents.OrientationEuler,
                    HighFidelityAudio.AvailableUserDataSubscriptionComponents.VolumeDecibels
                ],
                "callback": (receivedHiFiAudioAPIDataArray) => {
                    onNewUserDataReceived(receivedHiFiAudioAPIDataArray);
                }
            });
            hifiCommunicator.addUserDataSubscription(newUserDataSubscription);

            connectDisconnectButton.removeEventListener("click", getUserMediaWrapper);
            connectDisconnectButton.addEventListener("click", disconnectFromHiFiAudio);
            connectDisconnectButton.disabled = false;
            connectDisconnectButton.innerHTML = `Click to Disconnect`;

            outputAudioEl.srcObject = hifiCommunicator.getOutputAudioMediaStream();
            // We must call `play()` here because certain browsers won't autoplay this stream as we expect.
            outputAudioEl.play();
        }

        async function disconnectFromHiFiAudio() {
            console.log(`Disconnecting from High Fidelity Audio API Servers...`);

            connectDisconnectButton.removeEventListener("click", disconnectFromHiFiAudio);
            connectDisconnectButton.addEventListener("click", getUserMediaWrapper);
            connectDisconnectButton.disabled = false;
            connectDisconnectButton.innerHTML = `Click to Connect`;

            let disconnectStatus = await hifiCommunicator.disconnectFromHiFiAudioAPIServer();
            hifiCommunicator = null;
            console.log(disconnectStatus);
        }

        function updatePositionContainer() {
            ourPositionContainer.innerHTML = `Position: ${currentPosition ? JSON.stringify(currentPosition) : "&#60;unknown&#62;"}`;
        }

        function updateOrientationContainer() {
            ourOrientationContainer.innerHTML = `Orientation: ${currentOrientationEuler ? JSON.stringify(currentOrientationEuler) : "&#60;unknown&#62;"}`;
        }

        function updateAndTransmit() {
            updateOrientationContainer();
            updatePositionContainer();
            transmitHiFiAudioAPIDataToMixer();
        }

        function subtractX() {
            currentPosition.x -= 1;
            updateAndTransmit();
        }
        function addX() {
            currentPosition.x += 1;
            updateAndTransmit();
        }
        function subtractY() {
            currentPosition.y -= 1;
            updateAndTransmit();
        }
        function addY() {
            currentPosition.y += 1;
            updateAndTransmit();
        }
        function subtractZ() {
            currentPosition.z -= 1;
            updateAndTransmit();
        }
        function addZ() {
            currentPosition.z += 1;
            updateAndTransmit();
        }

        function subtractPitch() {
            currentOrientationEuler.pitchDegrees -= 45;
            updateAndTransmit();
        }
        function addPitch() {
            currentOrientationEuler.pitchDegrees += 45;
            updateAndTransmit();
        }
        function subtractYaw() {
            currentOrientationEuler.yawDegrees -= 45;
            updateAndTransmit();
        }
        function addYaw() {
            currentOrientationEuler.yawDegrees += 45;
            updateAndTransmit();
        }
        function subtractRoll() {
            currentOrientationEuler.rollDegrees -= 45;
            updateAndTransmit();
        }
        function addRoll() {
            currentOrientationEuler.rollDegrees += 45;
            updateAndTransmit();
        }

        function resetOrientation() {
            currentOrientationEuler.pitchDegrees = 0;
            currentOrientationEuler.yawDegrees = 0;
            currentOrientationEuler.rollDegrees = 0;

            updateOrientationContainer();

            if (!hifiCommunicator) {
                return;
            }
            console.log(hifiCommunicator.updateUserDataAndTransmit({
                orientationQuat: { "w": 1, "x": 0, "y": 0, "z": 0 }
            }));
        }

        function resetPosition() {
            currentPosition.x = 0;
            currentPosition.y = 0;
            currentPosition.z = 0;

            updatePositionContainer();

            transmitHiFiAudioAPIDataToMixer();
        }

        function transmitHiFiAudioAPIDataToMixer() {
            if (!hifiCommunicator) {
                return;
            }

            console.log(hifiCommunicator.updateUserDataAndTransmit({
                position: currentPosition,
                orientationEuler: currentOrientationEuler,
            }));
        }

        // DRAW STUFF
        draw();
    </script>
</body>

</html>